/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.polimi.ingsw.ps14.client.view.gui;

import it.polimi.ingsw.ps14.client.Communication;
import it.polimi.ingsw.ps14.model.State;
import it.polimi.ingsw.ps14.model.WaitingFor;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

/**
 *
 * @author peter
 */
public class NobilityRequestDialog extends javax.swing.JDialog {

	private final transient Integer playerID;
	private final transient Communication communication;
	private final State state;
	private final Map<JCheckBox, String> checkboxes;
	
	/**
	 * Creates new form NobilityRequestDialog
	 */
	public NobilityRequestDialog(java.awt.Frame parent, boolean modal, Integer playerID, Communication communication, State state) {
		super(parent, "Nobility track bonus", modal);
		this.playerID = playerID;
		this.communication = communication;
		this.state = state;
		
		initComponents();
				
		// set description
		if (state.getWaitingFor() == WaitingFor.TAKEPERMIT) {
			descriptionLabel.setText("You can get one or more free business permits.");
		} else if (state.getWaitingFor() == WaitingFor.FROMPERMITS) {
			descriptionLabel.setText("You can regain one or more bonuses from your business permits.");
		} else if (state.getWaitingFor() == WaitingFor.FROMTOKENS) {
			descriptionLabel.setText("You can regain one or more bonuses from the cities where you've built an emporium.");
		}
		descriptionLabel.repaint();
		descriptionLabel.revalidate();
		
		// set description number of choices
		numberChoicesLabel.setText(String.format("You can choose up to %d of these:", state.getWaitingForHowMany()));
		numberChoicesLabel.repaint();
		numberChoicesLabel.revalidate();
		
		// build a checkbox for each choice
		// put the checkboxes in a list with the corresponding id
		Map<String, String> choices = state.getAvailableChoices();
		choicesPanel.setLayout(new java.awt.GridLayout(choices.size(), 0));
		checkboxes = new HashMap<>();
		for (Map.Entry<String, String> choice : choices.entrySet())
		{
			JCheckBox checkbox = new JCheckBox(choice.getValue());
			checkboxes.put(checkbox, choice.getKey());
			choicesPanel.add(checkbox);
			choicesPanel.repaint();
			choicesPanel.revalidate();
		}

		pack();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        choicesPanel = new javax.swing.JPanel();
        confirmButton = new javax.swing.JButton();
        numberChoicesLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        titleLabel.setText("You advanced in the nobility track!");

        descriptionLabel.setText("[description]");

        choicesPanel.setLayout(new java.awt.GridLayout(200, 0));

        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        numberChoicesLabel.setText("[number of available choices]");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(titleLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numberChoicesLabel)
                            .addComponent(descriptionLabel)
                            .addComponent(choicesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(241, 241, 241)
                        .addComponent(confirmButton)))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addGap(18, 18, 18)
                .addComponent(descriptionLabel)
                .addGap(12, 12, 12)
                .addComponent(numberChoicesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(choicesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(confirmButton)
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
		// get choices 
		// for each entry in checkboxes
		// if checkbox is selected, add value (id) to list of ids chosen
		List<String> choices = new ArrayList();
		
		for (Map.Entry<JCheckBox, String> entry : checkboxes.entrySet())
		{
			if (entry.getKey().isSelected()) {
				choices.add(entry.getValue());
			}
		}
		
		if (choices.size() <= state.getWaitingForHowMany()) {
			communication.answerNobilityRequest(playerID, choices);
			dispose();
		} else {
			JOptionPane.showMessageDialog(null, String.format("You cannot select more than %d", state.getWaitingForHowMany()), "Warning", JOptionPane.WARNING_MESSAGE);
			return;
		}
    }//GEN-LAST:event_confirmButtonActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(NobilityRequestDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(NobilityRequestDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(NobilityRequestDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(NobilityRequestDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				State fakeState = new State();
				fakeState.setWaitingFor(WaitingFor.FROMPERMITS);
				fakeState.setWaitingForHowMany(2);
				Map<String, String> availableChoices = new HashMap<>();
				availableChoices.put("12", "Bonus: +1 point");
				availableChoices.put("45", "Bonus: +1 nobility, +3 cards");
				availableChoices.put("102", "Bonus: none");
				fakeState.setAvailableChoices(availableChoices);
				NobilityRequestDialog dialog = new NobilityRequestDialog(new javax.swing.JFrame(), true, 0, null, fakeState);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel choicesPanel;
    private javax.swing.JButton confirmButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JLabel numberChoicesLabel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
